set nocompatible
" Sample .vimrc file by Martin Brochhaus
" Presented at PyCon APAC 2012


" ============================================
" Note to myself:
" DO NOT USE <C-z> FOR SAVING WHEN PRESENTING!
" ============================================


" Automatic reloading of .vimrc
" Automatic updating vimrc
if has("autocmd")
    augroup au_default
        autocmd!
        autocmd BufWritePost .vimrc,vimrc0,.lvimrc source $MYVIMRC
    augroup END
endif

" ## encoding
scriptencoding utf-8
set encoding=utf-8
" To check the unix CR/LF file format
set fileformat=unix
set ffs=unix
set encoding=utf-8
set fileencoding=utf-8
" fallback encoding to gb18030
set fileencodings=utf-8,gb18030
"e ++ff=unix


" Put these in an autocmd group, so that we can delete them easily.
augroup au_gotoLastPosition
    autocmd!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
augroup END

" Better copy & paste
" When you want to paste large blocks of code into vim, press F2 before you
" paste. At the bottom you should see ``-- INSERT (paste) --``.

"set pastetoggle=<F12>
"set clipboard=unnamed
" use xclip to copy paste
" sudo aptitude install xclip
function! Func2X11()
    :call system('xclip -selection c', @r)
endfunction
vnoremap yx "ry:call Func2X11()<cr>
"vnoremap yx :!xclip -f -sel clip<CR>
" paste on previous line
noremap yP :-1r !xclip -o -sel clip<CR>
" paste on next line
noremap yp :r !xclip -o -sel clip<CR>

" Convert slashes to backslashes for Windows.
if has('win32')
  nnoremap yf :let @"=substitute(expand("%:p"), "/", "\\", "g")<CR>
  nnoremap yr :let @"=substitute(expand("%:p:."), "/", "\\", "g")<CR>
  nnoremap yn :let @"=substitute(expand("%:t"), "/", "\\", "g")<CR>
  nnoremap ym :let @"=substitute(expand("%:p:."), "/", ".", "g")<CR>

  " This will copy the path in 8.3 short format, for DOS and Windows 9x
  "nmap yn :let @*=substitute(expand("%:p:8"), "/", "\\", "g")<CR>
else
  nnoremap yf :let @"=expand("%:p")<CR>
  nnoremap yr :let @"=expand("%:p:.")<CR>
  nnoremap yn :let @"=expand("%:t")<CR>
  nnoremap ym :let @"=substitute(expand("%:p:."), "/", ".", "g")<CR>
endif

" Mouse and backspace
"" set mouse=a  " on OSX press ALT and click
"" set bs=2     " make backspace behave like normal again
if has('mouse')
    set mouse=a
endif
set backspace=indent,eol,start

" Rebind <Leader> key
" I like to have it here becuase it is easier to reach than the default and
" it is next to ``m`` and ``n`` which I use for navigating between tabs.
let mapleader=","
let maplocalleader=","

" easier moving between tabs and buffers
nnoremap <C-n> <esc>:bnext<CR>
nnoremap <C-p> <esc>:bprevious<CR>
nnoremap 1 <esc>:bfirst<CR>

execute "set <M-n>=\en"
execute "set <M-p>=\ep"
execute "set <M-t>=\et"
execute "set <M-e>=\ee"
nnoremap <M-n> <esc>:tabnext<CR>
nnoremap <M-p> <esc>:tabprevious<CR>
nnoremap <M-t> <esc>:tabnew<CR>
nnoremap <M-e> <esc>:tabclose<CR>

" map sort function to a key
"" vnoremap <Leader>s :sort<CR>


" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation


" Show whitespace
" MUST be inserted BEFORE the colorscheme command
"autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
"au InsertLeave * match ExtraWhitespace /\s\+$/

" Enable syntax highlighting
" You need to reload this file for the change to apply
filetype off
filetype plugin indent on
syntax on

" Color scheme
" mkdir -p ~/.vim/colors && cd ~/.vim/colors
" Wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
"set t_Co=256
"color wombat256mod

" ## Color scheme
set t_Co=256
let g:solarized_termcolors=256
set background=dark
let g:solarized_visibility="high"
colorscheme solarized

"" Speed up response to ESC key
"set notimeout
"set ttimeout
"set timeoutlen=100

" show tabs and spaces
"set list
"set listchars=tab:>-,extends:#
set listchars=tab:»·,trail:·
set list

" Showing line numbers and length
set number  " show line numbers
set nowrap  " don't automatically wrap on load
set fo-=t   " don't automatically wrap text when typing
set colorcolumn=80
"" highlight ColorColumn ctermbg=233

" Useful settings
set history=700
set undolevels=700

" Real programmers don't use TABs but spaces
" indentation
set smartindent
set shiftwidth=4
set shiftround
set preserveindent
set smarttab
set tabstop=4
set softtabstop=4
set hidden
set expandtab
set textwidth=80


" ## Make search case insensitive
set hlsearch
" show where the pattern match realtime
set incsearch
set ignorecase
"set smartcase

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
"" set nobackup
"" set nowritebackup
"" set noswapfile

"w!! writes the file using sudo
cmap w!! w !sudo tee % >/dev/null

" Setup Pathogen to manage your plugins
" mkdir -p ~/.vim/autoload ~/.vim/bundle
" curl -so ~/.vim/autoload/pathogen.vim https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim
" Now you can install any plugin into a .vim/bundle/plugin-name/ folder
" Pathogen load
call pathogen#infect()
"call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" =====================================================
" Normal key mappings, especially for C-*
" =====================================================
"
" Bind nohl
" Removes highlight of your last search
" ``<C>`` stands for ``CTRL`` and therefore ``<C-n>`` stands for ``CTRL+n``
"" noremap <C-n> :nohl<CR>
"" vnoremap <C-n> :nohl<CR>
"" inoremap <C-n> :nohl<CR>

" Quicksave command
noremap <C-s> :update<CR>
vnoremap <C-s> <C-C>:update<CR>
inoremap <C-s> <esc>:update<CR>a
" 确认退出
set confirm

" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good for your health :)
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k
nnoremap <C-l> <c-w>l
nnoremap <C-h> <c-w>h

nnoremap <C-x> :bdelete<cr>
nnoremap <C-q> :q<cr>

inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-j> <Down>
inoremap <C-k> <C-o>d$
inoremap <C-d> <Del>
inoremap <C-e> <End>
inoremap <C-a> <Home>

"======================================================
" Move keys
" =====================================================

" Jump 5 lines when running out of the screen
set scrolljump=5
" Indicate jump out of the screen when 3 lines before end of the screen
set scrolloff=3

" =====================================================
" Text shortcut
" =====================================================

noremap - :call ReplaceBlank()<CR>
function! s:_replace_blank(text)
    let text = a:text
    let text_new = substitute(text, "[ \t]*$", "", "")
    return text_new
endfunction
function! ReplaceBlank()
    let n = line(".")
    let line = getline(n)
    let line_new = <SID>_replace_blank(line)
    if line_new != line
        call setline(n, line_new)
    endif
endfunction

" =====================================================
" abbreviation
" =====================================================
" email
iabbrev @@    zy.netsec@gmail.com
" copyright
iabbrev ccopy Copyright 2017 Zhang Yang, all rights reserved.

" ============================================================================
" Python IDE Setup
" ============================================================================


" Settings for vim-powerline
" cd ~/.vim/bundle
" git clone git://github.com/Lokaltog/vim-powerline.git
set laststatus=2


" Settings for ctrlp
" cd ~/.vim/bundle
" git clone https://github.com/kien/ctrlp.vim.git
let g:ctrlp_max_height = 30
"" set wildignore+=*.pyc
"" set wildignore+=*_build/*
"" set wildignore+=*/coverage/*
"let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v([\/]\.(git|hg|svn)|node_modules)$',
  \ 'file': '\v\.(exe|so|dll|pyc|pyd|pyo)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("j")':   ['<c-n>'],
    \ 'PrtSelectMove("k")':   ['<c-p>'],
    \ 'PrtHistory(-1)':       ['<down>', '<c-j>'],
    \ 'PrtHistory(1)':        ['<up>', '<c-k>'],
    \ }
let g:ctrlp_working_path_mode = 0
let g:ctrlp_extensions = ['tag']
nnoremap fb :CtrlPBuffer<cr>
nnoremap ft :CtrlPTag<cr>
let g:ctrlp_map = 'fp'
let g:ctrlp_cmd = 'CtrlPCurWD'

" Settings for python-mode
" Note: I'm no longer using this. Leave this commented out
" and uncomment the part about jedi-vim instead
" cd ~/.vim/bundle
" git clone https://github.com/klen/python-mode
"" map <Leader>g :call RopeGotoDefinition()<CR>
"" let ropevim_enable_shortcuts = 1
"" let g:pymode_rope_goto_def_newwin = "vnew"
"" let g:pymode_rope_extended_complete = 1
"" let g:pymode_breakpoint = 0
"" let g:pymode_syntax = 1
"" let g:pymode_syntax_builtin_objs = 0
"" let g:pymode_syntax_builtin_funcs = 0
"" map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>

"" let g:pymode = 1
"" let g:pymode_rope_completion = 1
"" let g:pymode_rope_complete_on_dot = 1
"" let g:pymode_rope_completion_bind = '<C-m>'
"" let g:pymode_rope_autoimport = 1
"" let g:pymode_rope_autoimport_modules = ['os', 'sys', 'shutil', 'datetime']

" Settings for jedi-vim
" cd ~/.vim/bundle
" git clone git://github.com/davidhalter/jedi-vim.git
let g:jedi#completions_command = "<C-j>"
let g:jedi#usages_command = "fu"
let g:jedi#goto_definitions_command = "gd"
let g:jedi#goto_assignments_command = "gs"
"" let g:jedi#popup_on_dot = 0
"" let g:jedi#popup_select_first = 0
"" map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>
"let g:jedi#force_py_version = 3
" Add the virtualenv's site-packages to vim path
let g:virtualenv_auto_activate = 1

" Better navigating through omnicomplete option list
" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
set completeopt=longest,menuone
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction

inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>


" Python folding
" mkdir -p ~/.vim/ftplugin
" wget -O ~/.vim/ftplugin/python_editing.vim http://www.vim.org/scripts/download_script.php?src_id=5492
set nofoldenable

" ## edit key mappings

" Shortcut to open vimrc
nnoremap <Leader>ev :split ~/.vim/vimrc0<cr>
nnoremap <Leader>ep :split ~/.vim/UltiSnips/python.snippets<cr>
nnoremap <Leader>eo :split ~/.vim/bundle/vim-snippets/UltiSnips/python.snippets<cr>

" ### add " ' wrap functions
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel

vnoremap <leader>" <esc>`<i"<esc>`>a"<esc>
vnoremap <leader>' <esc>`<i'<esc>`>a'<esc>
vnoremap <leader>''' <esc>`<i'''<esc>`>a'''<esc>

" disable esc function to force use <c-c>
inoremap <esc> <nop>
inoremap jk <esc>
inoremap kj <esc>


" omnicppcomplete
nnoremap <F5> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --exclude=dist --exclude=tags --exclude=cscope.out --exclude=node_modules --extra=+q .<CR>
    \:UMiniBufExplorer<CR>
" for qt5 ctags generate
"ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ -f qt5 /usr/include/x86_64-linux-gnu/qt5/

" ### clang_complete should compatlible with comnicppcomplete
" git clone https://github.com/Rip-Rip/clang_complete.git
" project can put .clang_complete file in project's root, and add -DDEBUG -Isrcs/
" aptitude remove libclang-5.0-dev libclang1-5.0
" path to directory where library can be found
"let g:clang_library_path='/usr/lib/llvm-3.6/lib'
" or path directly to the library file
if filereadable("/usr/lib/llvm-3.6/lib/libclang.so.1")
    let g:clang_library_path='/usr/lib/llvm-3.6/lib/libclang.so.1'
elseif filereadable("/usr/lib64/libclang.so")
    let g:clang_library_path='/usr/lib64/libclang.so'
endif
"let g:clang_omnicppcomplete_compliance=1
"let g:clang_make_default_keymappings=0
let g:clang_complete_macros=1
let g:clang_complete_patterns=1
let g:clang_jumpto_declaration_key='gd'
"let g:clang_complete_copen=1
let g:clang_hl_errors=1
" make it in save and open buffer
"let g:clang_periodic_quickfix=1
augroup clang_complete
    autocmd FileType cpp nnoremap <Leader>c :call g:ClangUpdateQuickFix()<CR>
    "autocmd BufWritePost *.cpp,*.h :call g:ClangUpdateQuickFix()<CR>
augroup END

" taglist_45
" 函数和变量列表
"nnoremap <F3> :TlistToggle<CR>
" 更新函数变量表 间隔时间 for tag list
"set updatetime=100

" ### vim-autotags
let g:autotagTagsFile = 'tags'
let g:autotagmaxTagsFileSize = 104857600  " 100MB
" custom tags args, adapt with omnicppcomplete
let g:autotagTagsArgs = '--sort=yes --c++-kinds=+p --fields=+iaS --extra=+q'
"let g:autotagVerbosityLevel = 10 " DEBUG

" ### syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"let g:syntastic_python_checkers = ['pylint']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_post_args =
    \ [ '--ignore=E301,E302,E305,E402,E251,E265,E272,E712,E128,E711,E201,E202,E221,E701,E401,E226,E704,E999,E261,E305',
    \   '--max-line-length=120',
    \   '--max-complexity=12',
    \   '--builtins=_' ]
let g:syntastic_python_pylint_post_args =
    \ [ '--module-rgx=[a-zA-Z_][a-zA-Z0-9_]*$',
    \   '--max-line-length', '120',
    \   '--indent-string="    "',
    \   '--load-plugins', 'pylint_django',
    \   '--disable=line-too-long,missing-docstring,' .
    \      'too-many-public-methods,too-few-public-methods,' .
    \      'not-callable,locally-disabled,bad-continuation,' .
    \      'attribute-defined-outside-init' ]
" no-name-in-module

" syntastic cpp options
"let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = "-std=c++11 -Wall -Wextra -Wpedantic"

function! ToggleQuickFix()
  if exists("g:qwindow")
    lclose
    lclose
    unlet g:qwindow
  else
    try
      lopen 10
      let g:qwindow = 1
    catch
      echo "No Errors found!"
    endtry
  endif
endfunction

nmap <script> <silent> <F3> :call ToggleQuickFix()<CR>
function! <SID>LocationPrevious()
  try
    lprev
  catch /^Vim\%((\a\+)\)\=:E553/
    llast
  endtry
endfunction
function! <SID>LocationNext()
  try
    lnext
  catch /^Vim\%((\a\+)\)\=:E553/
    lfirst
  endtry
endfunction
nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>
nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
nmap <silent> sp    <Plug>LocationPrevious
nmap <silent> sn    <Plug>LocationNext

" ### NerdTree
nnoremap fr :NERDTreeFind<cr>
nnoremap <F3> :NERDTreeToggle<cr>
let NERDTreeQuitOnOpen = 0
let NERDTreeIgnore = ['\.pyc$']

" ### find in files, and grep, using plugin grepper
set grepprg=grep\ -niI\ --exclude=tags\ --exclude=cscope.out\ --exclude=node_modules\ --exclude=dist
" for browsing the input history
cnoremap <c-n> <down>
cnoremap <c-p> <up>

"autocmd FileType GrepperSide
"  \  silent execute 'keeppatterns v#'.b:grepper_side.'#>'
"  \| silent normal! ggn

" <Leader>f for search in buffers

nnoremap ff :Grepper -buffers -highlight -jump -prompt -cword <cr>--
nnoremap fs :Grepper -buffers -highlight -jump -prompt -cword -side <cr>--
xnoremap ff :Grepper -buffers -highlight -jump -prompt -cword <cr>--
xnoremap fs :Grepper -buffers -highlight -jump -prompt -cword -side <cr>--
nmap fo  <plug>(GrepperOperator)
xmap fo  <plug>(GrepperOperator)

" <Leader>F for search in files in current directory
nnoremap FF :Grepper -dir pwd -highlight -jump -prompt -cword <cr>--
nnoremap FS :Grepper -dir pwd -highlight -jump -prompt -cword -side <cr>--
xnoremap FF :Grepper -dir pwd -highlight -jump -prompt -cword <cr>--
xnoremap FS :Grepper -dir pwd -highlight -jump -prompt -cword -side <cr>--

nnoremap fg :Grepper -tool git<cr>
nnoremap fa :Grepper -tool grep<cr>

let g:grepper           = {}
let g:grepper.tools     = ['grep', 'git', 'ag']
let g:grepper.open      = 1
let g:grepper.jump      = 0
"let g:grepper.next_tool = '<leader>f'  " default is <TAB>

command! Todo :Grepper
      \ -noprompt
      \ -tool git
      \ -grepprg git grep -nIi '\(TODO\|FIXME\)'


" ### asyncrun
" git clone https://github.com/skywind3000/asyncrun.vim.git
" %:p     - File name of current buffer with full path
" %:t     - File name of current buffer without path
" %:p:h   - File path of current buffer without file name
" %:e     - File extension of current buffer
" %:t:r   - File name of current buffer without path and extension
" %       - File name relativize to current directory
" %:h:.   - File path relativize to current directory
" <cwd>   - Current directory
" <cword> - Current word under cursor
" <cfile> - Current file name under cursor
" <root>  - Project root directory
" run testcase
augroup au_python_run
    autocmd!
    autocmd FileType python nnoremap rt :AsyncRun -auto=make python runtc.py %:t:r
    autocmd FileType python nnoremap rc :AsyncRun -auto=make runcmd.sh %:t:r
    autocmd FileType python nnoremap rf :AsyncRun -auto=make python %:p
    autocmd FileType python nnoremap rb :AsyncRun -auto=make python -c "import py_compile,sys; sys.stderr=sys.stdout; py_compile.compile(r'%:p')"
    autocmd BufNewFile,BufRead SCons* set filetype=scons
augroup END

augroup au_build_run
    autocmd!
    autocmd FileType cpp nnoremap rs :AsyncRun -auto=make scons
augroup END

" echo current root path
"" :echo asyncrun#get_root('%')

" ### python compiler
augroup au_python
    autocmd!
    autocmd FileType python source ~/.vim/compiler/python.vim
    autocmd FileType python source ~/.vim/compiler/py_compile.vim
augroup END
" auto open quickfix when asyncrun start
augroup au_asyncrun
    autocmd!
    autocmd User AsyncRunStart call asyncrun#quickfix_toggle(8, 1)
augroup END

" Snippets -- Simplify commands. I rarely Expand. Instead I usually list and
" then complete.
" git clone https://github.com/honza/vim-snippets.git
" git clone https://github.com/SirVer/ultisnips.git
let g:UltiSnipsExpandTrigger       = '<C-t><C-t>'
let g:UltiSnipsListSnippets        = '<C-t><C-l>'
let g:UltiSnipsJumpForwardTrigger  = '<C-t><C-n>'
let g:UltiSnipsJumpBackwardTrigger = '<C-t><C-p>'
let g:ultisnips_python_style = 'doxygen'
let g:UltiSnipsEditSplit="vertical"
let g:ultisnips_python_triple_quoting_style='single'

let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips/'

" conqueTerm
"let g:ConqueTerm_EscKey = '<C-k>'
let g:ConqueTerm_CloseOnEnd = 1
" open bash in current directory
"nnoremap <F3> :ConqueTermSplit bash<CR>
" open bash in file directory
" oepn ipython in current directory

" ### minibufexpl
map <Leader>b :TMiniBufExplorer<CR>

" Vimscript file settings ---------------------- {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" ### errormarker
" do not show error red background
let g:errormarker_errorgroup=""

" ### git plugin vim-fugitive
" git clone https://github.com/tpope/vim-fugitive.git

" ### localvimrc
" git clone https://github.com/embear/vim-localvimrc.git localvimrc
let g:localvimrc_sandbox='0'
let g:localvimrc_ask='0'

" ### cppman
" sudo aptitude install cppman
"autocmd FileType cpp set keywordprg=cppman
augroup cppman
    autocmd FileType cpp nnoremap <silent><buffer> L <Esc>:!cppman <cword><CR>
augroup END

" ### auto enable paste and nopaste mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction
set pastetoggle=<F2>

" ### line indent for vue js space 2
augroup lineindent
    autocmd FileType vue setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType js setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
augroup END

" zencoding
let g:user_zen_settings = {
\  'indentation' : '  '
\}

augroup encodingutf8
    autocmd BufReadPost * FencManualEncoding utf-8
augroup END
